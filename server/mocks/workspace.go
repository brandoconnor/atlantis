// Code generated by MockGen. DO NOT EDIT.
// Source: server/workspace.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/hootsuite/atlantis/models"
	reflect "reflect"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkspace is a mock of Workspace interface
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *MockWorkspace) Clone(ctx *server.CommandContext) (string, error) {
	ret := m.ctrl.Call(m, "Clone", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *MockWorkspaceMockRecorder) Clone(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWorkspace)(nil).Clone), ctx)
}

// GetWorkspace mocks base method
func (m *MockWorkspace) GetWorkspace(ctx *server.CommandContext) (string, error) {
	ret := m.ctrl.Call(m, "GetWorkspace", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace
func (mr *MockWorkspaceMockRecorder) GetWorkspace(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockWorkspace)(nil).GetWorkspace), ctx)
}

// Delete mocks base method
func (m *MockWorkspace) Delete(repo models.Repo, pull models.PullRequest) error {
	ret := m.ctrl.Call(m, "Delete", repo, pull)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockWorkspaceMockRecorder) Delete(repo, pull interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkspace)(nil).Delete), repo, pull)
}
